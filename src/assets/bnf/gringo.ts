export const gringo = `
WS = ' ' | ? ISO 6429 character Horizontal Tabulation ?;
NL = ? ISO 6429 character Carriage Return ?;
IF = ":-";
NOT = 'not';
DIGIT = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
DIGIT1 = DIGIT-'0';
UNDERSCORE = '_';
LETTER = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z';
CAP_LETTER = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z';
IN_STRING = LETTER | CAP_LETTER | UNDERSCORE | DIGIT;
IDENTIFIER = [LETTER | UNDERSCORE], {IN_STRING};
STRING = '"', {INSTRING-('"' | 'NL')}, '"';
VARIABLE = [CAP_LETTER], {IN_STRING};
COMMENT = '%', {IN_STRING-NL}, NL;
BLOCK_COMMENT = '%*', {IN_STRING | NL}, '*%';
SHOW = ['#'], 'show';
HIDE = ['#'], 'hide';
CONST = ['#'], 'const';
DOMAIN = ['#'], 'domain';
MINIMIZE = ['#'], 'minimize';
MAXIMIZE = ['#'], 'maximize';
COMPUTE = ['#'], 'compute';
BASE = ['#'], 'base';
CUMULATIVE = ['#'], 'cumulative';
VOLATILE = ['#'], 'volatile';
DISJUNCTION = '|';
LPARA = '(';
RPARA = ')';
LBRAC = '{';
RBRAC = '}';
LSBRAC = '[';
RSBRAC = ']';
DOT = '.';
DOTS = '..';
SEMI = ';';
DDOT = ':';
COMMA = ',';
PLUS = '+';
TILDE = '~';
OR = '?';
AND = '&';
XOR = '^';
MINUS = '-';
TIMES = '*';
DIVIDE = '/';
ASSIGN = '=';
EQ = '==';
NE = '!=';
GT = '>';
LT = '<';
GE = '>=';
LE = '<=';
START = PROGRAM;
PROGRAM = PROGRAM, RULE, DOT;
PROGRAM = PROGRAM, SHOW, SHOW_LIST, DOT;
PROGRAM = PROGRAM, HIDE, HIDE_LIST, DOT;
PROGRAM = PROGRAM, DOMAIN, DOMAIN_LIST, DOT;
PROGRAM = PROGRAM, CONST, IDENTIFIER, ASSIGN, CONST_TERM, DOT;
PROGRAM = PROGRAM, BASE, DOT;
PROGRAM = PROGRAM, CUMULATIVE, IDENTIFIER, DOT;
PROGRAM = PROGRAM, VOLATILE, IDENTIFIER, DOT;
PROGRAM = DOT;
SHOW_LIST = SHOW_LIST, COMMA, SHOW_PREDICATE;
SHOW_LIST = SHOW_PREDICATE;
HIDE_LIST = NHIDE_LIST;
NHIDE_LIST = NHIDE_LIST COMMA HIDE_PREDICATE;
NHIDE_LIST = HIDE_PREDICATE;
DOMAIN_LIST = DOMAIN_LIST COMMA DOMAIN_PREDICATE;
DOMAIN_LIST = DOMAIN_PREDICATE;
NEG_PRED = IDENTIFIER;
NEG_PRED = MINUS, IDENTIFIER;
SHOW_PREDICATE = NEG_PRED, LPARA, NEG_PRED, RPARA;
SHOW_PREDICATE = NEG_PRED;
SHOW_PREDICATE = NEG_PRED, DIVIDE, NUMBER;
HIDE_PREDICATE = NEG_PRED, LPARA VARIABLE_LIST, RPARA;
HIDE_PREDICATE = NEG_PRED;
HIDE_PREDICATE = NEG_PRED, DIVIDE, NUMBER;
DOMAIN_PREDICATE = NEG_PRED, LPARA, DOMAIN_LIST, RPARA;
VARIABLE_LIST = VARIABLE_LIST, COMMA, VARIABLE;
VARIABLE_LIST = VARIABLE;
DOMAIN_VAR = VARIABLE;
DOMAIN_VAR = DOMAIN_VAR, SEMI, VARIABLE;
DOMAIN_LIST = DOMAIN_LIST, COMMA, DOMAIN_VAR;
DOMAIN_LIST = DOMAIN_VAR(var);
RULE = HEAD_ATOM IF BODY;
RULE = HEAD_ATOM IF;
RULE = HEAD_ATOM;
RULE = IF BODY;
RULE = IF;
RULE = MAXIMIZE;
RULE = MINIMIZE;
RULE = COMPUTE;
BODY = BODY, COMMA, BODY_LITERAL;
BODY = BODY_LITERAL;
CONDITIONAL = PREDICATE;
CONDITIONAL = RELATION_LITERAL;
CONDITIONAL_LIST = CONDITIONAL_LIST, DDOT, CONDITIONAL;
BODY_LITERAL = BODY_ATOM;
BODY_LITERAL = NOT, BODY_ATOM;
BODY_LITERAL = RELATION_LITERAL;
BODY_LITERAL = VARIABLE, ASSIGN, AGGREGATE;
BODY_LITERAL = AGGREGATE_ATOM;
CONSTRAINT_LITERAL = CONSTRAINT_ATOM;
CONSTRAINT_LITERAL = NOT, CONSTRAINT_ATOM;
BODY_ATOM = PREDICATE, CONDITIONAL_LIST;
(* assignment literals are not realy relation literals but they are used like them *)
RELATION_LITERAL = VARIABLE, ASSIGN, TERM;
RELATION_LITERAL = TERM EQ TERM;
RELATION_LITERAL = TERM NE TERM;
RELATION_LITERAL = TERM GT TERM;
RELATION_LITERAL = TERM GE TERM;
RELATION_LITERAL = TERM LT TERM;
RELATION_LITERAL = TERM LE TERM;
HEAD_ATOM = AGGREGATE_ATOM;
HEAD_ATOM = DISJUNCTION;
DISJUNCTION = DISJUNCTION_LIST;
DISJUNCTION_LIST = DISJUNCTION_LIST, DISJUNCTION, CONSTRAINT_ATOM;
DISJUNCTION_LIST = CONSTRAINT_ATOM;
CONSTRAINT_ATOM = PREDICATE, CONDITIONAL_LIST;
PREDICATE = IDENTIFIER, LPARA, TERM_LIST, RPARA;
PREDICATE = IDENTIFIER;
PREDICATE = MINUS, IDENTIFIER, LPARA, TERM_LIST, RPARA;
PREDICATE = MINUS, IDENTIFIER;
AGGREGATE_ATOM = TERM, AGGREGATE, TERM;
AGGREGATE_ATOM = AGGREGATE, TERM;
AGGREGATE_ATOM = TERM, AGGREGATE;
AGGREGATE_ATOM = AGGREGATE;
TERM_LIST = TERM_LIST, COMMA, TERM;
TERM_LIST = TERM;
TERM = VARIABLE;
TERM = IDENTIFIER;
TERM = STRING;
TERM = NUMBER;
TERM = LPARA, TERM, RPARA;
TERM = TERM, MOD, TERM;
TERM = TERM, PLUS, TERM;
TERM = TERM, TIMES, TERM;
TERM = TERM, MINUS, TERM;
TERM = TERM, DIVIDE, TERM;
TERM = TERM, XOR, TERM;
TERM = TERM, AND, TERM;
TERM = TERM, OR, TERM;
TERM = TILDE, TERM;
TERM = TERM DOTS TERM;
TERM = MINUS TERM;
TERM = ABS, LPARA, TERM, RPARA;
TERM = TERM, SEMI, TERM;
TERM = IDENTIFIER, LPARA, TERM_LIST, RPARA;
CONST_TERM_LIST = CONST_TERM_LIST COMMA CONST_TERM;
CONST_TERM_LIST = CONST_TERM;
CONST_TERM = IDENTIFIER;
CONST_TERM = STRING;
CONST_TERM = NUMBER;
CONST_TERM = LPARA CONST_TERM, RPARA;
CONST_TERM = CONST_TERM, MOD, CONST_TERM;
CONST_TERM = CONST_TERM, PLUS, CONST_TERM;
CONST_TERM = CONST_TERM, TIMES, CONST_TERM;
CONST_TERM = CONST_TERM, MINUS, CONST_TERM;
CONST_TERM = CONST_TERM, DIVIDE, CONST_TERM;
CONST_TERM = MINUS, CONST_TERM;
CONST_TERM = ABS, LPARA, CONST_TERM, RPARA;
CONST_TERM = IDENTIFIER, LPARA, CONST_TERM_LIST, RPARA;
AGGREGATE = SUM, LSBRAC WEIGHT_LIST, RSBRAC;
AGGREGATE = LSBRAC, WEIGHT_LIST, RSBRAC;
AGGREGATE = COUNT, LBRAC CONSTR_LIST, RBRAC;
AGGREGATE = LBRAC, CONSTR_LIST, RBRAC;
AGGREGATE = MIN, LSBRAC, WEIGHT_LIST, RSBRAC;
AGGREGATE = MAX, LSBRAC, WEIGHT_LIST, RSBRAC;
COMPUTE = COMPUTE, LBRAC, CONSTR_LIST, RBRAC;
COMPUTE = COMPUTE, NUMBER, LBRAC, CONSTR_LIST, RBRAC;
MINIMIZE = MINIMIZE, LBRAC, CONSTR_LIST, RBRAC;
MINIMIZE = MINIMIZE, LSBRAC, WEIGHT_LIST, RSBRAC;
MAXIMIZE = MAXIMIZE, LBRAC, CONSTR_LIST, RBRAC;
MAXIMIZE = MAXIMIZE, LSBRAC, WEIGHT_LIST, RSBRAC;
WEIGHT_LIST = NWEIGHT_LIST;
NWEIGHT_LIST = NWEIGHT_LIST, COMMA, WEIGHT_TERM;
NWEIGHT_LIST = WEIGHT_TERM;
WEIGHT_TERM = CONSTRAINT_LITERAL, ASSIGN TERM;
WEIGHT_TERM = CONSTRAINT_LITERAL;
CONSTR_LIST = NCONSTR_LIST;
NCONSTR_LIST = NCONSTR_LIST, COMMA CONSTR_TERM;
NCONSTR_LIST = CONSTR_TERM;
CONSTR_TERM = CONSTRAINT_LITERAL;
`